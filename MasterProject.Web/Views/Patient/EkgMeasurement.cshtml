@using MasterProject.Core.Enums
@model MasterProject.Web.Models.MeasurementViewModel

@{
    ViewBag.Title = "Pomiar EKG";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
    <div class="container">
        <div id="smallNav">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Index", "Home")">Strona główna</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="@Url.Action("PatientList", "Patient")">Lista pacjentów</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="@Url.Action("EditPatient", "Patient", new { id = Model.Id })">Edycja konta</a>
                </li>
                <li class="breadcrumb-item">
                    <a>
                        <b>Pomiar EKG</b>
                    </a>
                </li>
            </ol>
        </div>

        <div id="chartContainer" style="height: 600px"></div>

        <div class="row" style="height: 50px">
        </div>
        <div class="row text-right">
            <div class="col">
                <button type="button" id="btnReset" class="btn btn-primary" disabled style="width: 100px;" onClick="reset()">Reset</button>
            </div>
            <div class="col text-center">
                <button type="button" id="btnStop" class="btn btn-danger" disabled style="width: 100px;" onClick="stop()">Stop</button>
                <button type="button" id="btnStart" class="btn btn-success" style="width: 100px;" onClick="start()">Start</button>
            </div>
            <div class="col text-left">
                <button type="button" id="btnSave" class="btn btn-primary" disabled onClick="save()">Zapisz do pliku csv</button>
            </div>
        </div>
    </div>
</main>

@section scripts{
    <script src="~/Scripts/canvasjs.min.js"></script>

    <script type="text/javascript">
        var xAxisStripLinesArray = [];
        var yAxisStripLinesArray = [];
        var dps = [];
        var interval;
        var dataLength = 20;
        var updateInterval = 10;
        var chart = new CanvasJS.Chart("chartContainer",
            {
                zoomEnabled: true,
                exportEnabled: true,
                title: {
                    text: "Raport EKG"
                },
                subtitles: [
                    {
                        text: "Imię i nazwisko: @Model.Name",
                        horizontalAlign: "left"
                    },
                    {
                        text: "Wiek: @Model.Age",
                        horizontalAlign: "left"
                    },
                    {
                        text: "Podpis lekarza",
                        horizontalAlign: "right",
                        verticalAlign: "bottom"
                    }
                ],
                axisY: {
                    //stripLines: yAxisStripLinesArray,
                    //gridThickness: 2,
                    //gridColor: "#DC74A5",
                    //lineColor: "#DC74A5",
                    //tickColor: "#DC74A5",
                    //labelFontColor: "#DC74A5",

                    includeZero: false,
                    title: "EKG [mV]"
                },
                axisX: {
                    //stripLines: xAxisStripLinesArray,
                    //gridThickness: 2,
                    //gridColor: "#DC74A5",
                    //lineColor: "#DC74A5",
                    //tickColor: "#DC74A5",
                    //labelFontColor: "#DC74A5",

                    title: "czas",
                    valueFormatString: "HH:mm:ss",
                    labelAngle: -20
                },
                data: [
                    {
                        type: "line",
                        color: "black",
                        dataPoints: dps,
                        xValueType: "dateTime",
                        xValueFormatString: "HH:mm:ss"
                    }
                ]
            });

        window.onload = function () {
            //addStripLines();

            chart.render();
        };

        function addStripLines() {
            for (var i = 0; i < 4500; i = i + 100) {
                if (i % 1000 !== 0)
                    yAxisStripLinesArray.push({ value: i, thickness: 0.7, color: "#DC74A5" });
            }
            for (var i = 0; i < 3000; i = i + 20) {
                if (i % 200 !== 0)
                    xAxisStripLinesArray.push({ value: i, thickness: 0.7, color: "#DC74A5" });
            }
        }

        var updateChart = function() {
            var yVal = 0;
            var xVal = 0;
            var error = false;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ReadData", new { deviceTypeId = (int)DeviceTypes.Ekg })',
                async: false,
                dataType: 'json',
                success: function(result) {
                    if (result !== null) {
                        yVal = result.data.Y;
                        xVal = result.data.X;
                    }
                },
                error: function () {
                    toastr.error('Nie można połączyć się z serwerem zdalnym');
                    stop();
                    error = true;
                }
            });
            
            if (error)
                return;

            dps.push({
                x: new Date(xVal),
                y: yVal
            });

            if (dps.length > dataLength) {
                dps.shift();
            }

            chart.render();
        };

        function stop() {
            clearInterval(interval);
            interval = null;
            $('#btnStop').prop('disabled', true);
            $('#btnSave').prop('disabled', false);
            $('#btnStart').prop('disabled', false);
        }

        function start() {
            interval = setInterval(function () { updateChart(); }, updateInterval);
            $('#btnStop').prop('disabled', false);
            $('#btnStart').prop('disabled', true);
            $('#btnReset').prop('disabled', false);
            $('#btnSave').prop('disabled', true);
        }

        function reset() {
            clearInterval(interval);
            interval = null;
            dps = [];
            chart.options.data[0].dataPoints = dps;
            chart.render();
            $('#btnStop').prop('disabled', true);
            $('#btnStart').prop('disabled', false);
            $('#btnReset').prop('disabled', true);
            $('#btnSave').prop('disabled', true);
        }

        function save() {
            $('#btnSave').prop('disabled', true);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveData")',
                data: { patientName: '@Model.Name', deviceName: 'EKG' },
                async: false,
                dataType: 'json',
                success: function(result) {
                    if (result !== null && result.type === 'OK') {
                        toastr.success(result.message);
                    }
                },
                error: function() {
                    toastr.error('Wystąpił błąd');
                }
            });
        }
    </script>
}